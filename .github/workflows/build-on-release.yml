name: Build on Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    if: contains(github.event.head_commit.message, 'Release:')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main repo with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Extract version from commit message
        id: extract_version
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          VERSION=$(echo "$COMMIT_MSG" | grep -oP 'Release:\s*\K[^\s]+')
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify submodule commits contain 'Release:'
        id: verify_submodules
        run: |
          echo "Checking submodule commits for 'Release:' tag..."
          HAS_RELEASE=false
          for module in $(git config --file .gitmodules --get-regexp path | awk '{ print $2 }'); do
            echo "Checking submodule: $module"
            pushd $module > /dev/null
            RECENT_COMMIT=$(git log -1 --pretty=%B)
            echo "Last commit: $RECENT_COMMIT"
            if [[ "$RECENT_COMMIT" == *"Release:"* ]]; then
              HAS_RELEASE=true
              echo "Release found in $module"
            fi
            popd > /dev/null
          done

          echo "has_release=$HAS_RELEASE" >> $GITHUB_OUTPUT

      - name: Stop if submodules do not have Release commit
        if: steps.verify_submodules.outputs.has_release != 'true'
        run: |
          echo "‚ùå No 'Release:' commit found in any submodule."
          exit 1

      - name: Build submodules and collect versioned artifacts
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          mkdir -p artifacts
          for module in $(git config --file .gitmodules --get-regexp path | awk '{ print $2 }'); do
            echo "üîß Building $module..."
            pushd $module
            chmod +x ./build-and-install.sh
            ./build-and-install.sh
            if [ -d "./dist" ]; then
              DEST="../artifacts/${module}-${VERSION}"
              mkdir -p "$DEST"
              cp -r ./dist/* "$DEST/"
              echo "‚úÖ Copied dist to $DEST"
            else
              echo "‚ö†Ô∏è No dist/ found in $module"
            fi
            popd
          done

      - name: Upload versioned artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ steps.extract_version.outputs.version }}
          path: artifacts
