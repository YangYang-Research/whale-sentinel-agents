name: Build on Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  extract_main_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: 📦 Checkout main repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷 Extract version from main commit
        id: extract
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          VERSION=$(echo "$COMMIT_MSG" | grep -oP 'Release:\s*\K[^\s]+' || true)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  extract_submodule_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: 📦 Checkout repo with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: 🏷 Extract version from submodule commits
        id: extract
        run: |
          FOUND_VERSION=""
          for module in $(git config --file .gitmodules --get-regexp path | awk '{ print $2 }'); do
            pushd $module > /dev/null
            COMMIT_MSG=$(git log -1 --pretty=%B)
            VERSION=$(echo "$COMMIT_MSG" | grep -oP 'Release:\s*\K[^\s]+' || true)
            if [ -n "$VERSION" ]; then
              FOUND_VERSION=$VERSION
              break
            fi
            popd > /dev/null
          done
          echo "version=$FOUND_VERSION" >> $GITHUB_OUTPUT

  validate:
    runs-on: ubuntu-latest
    needs: [extract_main_version, extract_submodule_version]
    steps:
      - name: ✅ Validate main and submodule versions
        run: |
          MAIN_VERSION="${{ needs.extract_main_version.outputs.version }}"
          SUB_VERSION="${{ needs.extract_submodule_version.outputs.version }}"

          if [ -z "$MAIN_VERSION" ] || [ -z "$SUB_VERSION" ]; then
            echo "❌ Missing version. Exiting."
            exit 1
          fi

          if [ "$MAIN_VERSION" != "$SUB_VERSION" ]; then
            echo "❌ Version mismatch: $MAIN_VERSION != $SUB_VERSION"
            exit 1
          fi

          echo "✅ Versions matched: $MAIN_VERSION"

  build:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: 📦 Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: 🛠 Build submodules
        run: |
          for module in $(git config --file .gitmodules --get-regexp path | awk '{ print $2 }'); do
            echo "Building $module..."
            pushd $module > /dev/null
            chmod +x ./build-and-install.sh
            ./build-and-install.sh
            popd > /dev/null
