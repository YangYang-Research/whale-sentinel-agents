name: Build and Package Submodules on Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  extract_versions:
    runs-on: ubuntu-latest
    outputs:
      main_version: ${{ steps.extract_main.outputs.main_version }}
      sub_version: ${{ steps.extract_sub.outputs.sub_version }}
    steps:
      - name: üì¶ Checkout repo with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: üè∑ Extract version from main commit
        id: extract_main
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          VERSION=$(echo "$COMMIT_MSG" | grep -oP 'Release:\s*\K[^\s]+' || true)
          echo "main_version=$VERSION" >> $GITHUB_OUTPUT

      - name: üè∑ Extract version from submodule commits
        id: extract_sub
        run: |
          FOUND_VERSION=""
          for module in $(git config --file .gitmodules --get-regexp path | awk '{ print $2 }'); do
            pushd $module > /dev/null
            COMMIT_MSG=$(git log -1 --pretty=%B)
            VERSION=$(echo "$COMMIT_MSG" | grep -oP 'Release:\s*\K[^\s]+' || true)
            if [ -n "$VERSION" ]; then
              FOUND_VERSION=$VERSION
              break
            fi
            popd > /dev/null
          done
          echo "sub_version=$FOUND_VERSION" >> $GITHUB_OUTPUT

  validate:
    runs-on: ubuntu-latest
    needs: extract_versions
    steps:
      - name: ‚úÖ Validate versions
        run: |
          MAIN_VERSION="${{ needs.extract_versions.outputs.main_version }}"
          SUB_VERSION="${{ needs.extract_versions.outputs.sub_version }}"

          if [ -z "$MAIN_VERSION" ] || [ -z "$SUB_VERSION" ]; then
            echo "‚ùå Missing version info. Skipping."
            exit 1
          fi

          if [ "$MAIN_VERSION" != "$SUB_VERSION" ]; then
            echo "‚ùå Version mismatch."
            exit 1
          fi

          echo "‚úÖ Versions matched: $MAIN_VERSION"

  build:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: üì¶ Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: üõ† Build submodules
        run: |
          for module in $(git config --file .gitmodules --get-regexp path | awk '{ print $2 }'); do
            pushd $module > /dev/null
            chmod +x ./build-and-install.sh
            ./build-and-install.sh
            popd > /dev/null
          done

  upload_artifacts:
    runs-on: ubuntu-latest
    needs: [extract_versions, build]
    steps:
      - name: üì¶ Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: üìÅ Collect versioned artifacts
        run: |
          VERSION="${{ needs.extract_versions.outputs.main_version }}"
          mkdir -p artifacts
          for module in $(git config --file .gitmodules --get-regexp path | awk '{ print $2 }'); do
            DIST_PATH="$module/dist"
            DEST="artifacts/${module}-${VERSION}"
            if [ -d "$DIST_PATH" ]; then
              mkdir -p "$DEST"
              cp -r $DIST_PATH/* "$DEST/"
            fi
          done

      - name: ‚¨ÜÔ∏è Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ needs.extract_versions.outputs.main_version }}
          path: artifacts
