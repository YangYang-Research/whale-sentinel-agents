name: Build on Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  extract_main_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: 📦 Checkout main repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷 Extract version from main commit
        id: extract
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Main commit message: $COMMIT_MSG"
          VERSION=$(echo "$COMMIT_MSG" | grep -oP 'Release:\s*\K[^\s]+' || true)
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  extract_submodule_versions:
    name: Extract Release Info from Submodules
    needs: extract_main_version
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.check.outputs.ready }}
      build_matrix: ${{ steps.check.outputs.build_matrix }}
    steps:
      - name: 📦 Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: 🔍 Extract submodule versions
        id: check
        shell: bash
        run: |
          set -e

          SUBMODULES=(
            whale-sentinel-django-agent
            whale-sentinel-fastapi-agent
            whale-sentinel-flask-agent
          )

          ALL_SUCCESS=true
          MATRIX_INCLUDE=()

          for DIR in "${SUBMODULES[@]}"; do
            echo "📂 Checking submodule: $DIR"
            COMMIT_MSG=$(git log -1 --pretty=%B -- "$DIR")
            echo "🧾 Commit message from main repo: $COMMIT_MSG"

            if [[ "$COMMIT_MSG" =~ Release:[[:space:]]*v?([0-9a-zA-Z._-]+) ]]; then
              VERSION="${BASH_REMATCH[1]}"
              echo "✅ Found release version: $VERSION"
              MATRIX_INCLUDE+=("{\"name\":\"$DIR\",\"version\":\"$VERSION\"}")
            else
              echo "⚠️ No valid Release: version found for $DIR"
              ALL_SUCCESS=false
            fi
          done

          echo "ready=$ALL_SUCCESS" >> $GITHUB_OUTPUT
          MATRIX_JSON=$(printf '[%s]' "$(IFS=,; echo "${MATRIX_INCLUDE[*]}")")
          echo "build_matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  build_submodules:
    name: Build Submodules
    needs: extract_submodule_versions
    if: needs.extract_submodule_versions.outputs.ready == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.extract_submodule_versions.outputs.build_matrix) }}
    steps:
      - name: 📦 Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: 🛠 Build submodule ${{ matrix.name }}
        working-directory: ./${{ matrix.name }}
        run: |
          chmod +x ./build-and-install.sh
          ./build-and-install.sh

      - name: 📤 Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-dist
          path: ${{ matrix.name }}/dist
