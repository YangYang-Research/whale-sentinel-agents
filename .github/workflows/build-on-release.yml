name: Build on Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  extract_main_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: 📦 Checkout main repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷 Extract version from main commit
        id: extract
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          VERSION=$(echo "$COMMIT_MSG" | grep -oP 'Release:\s*\K[^\s]+' || true)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  extract_submodule_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: 📦 Checkout repo with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: 🏷 Extract version from submodule commits
        id: extract
        run: |
          FOUND_VERSION=""
          for module in $(git config --file .gitmodules --get-regexp path | awk '{ print $2 }'); do
            echo "Checking submodule: $module"
            SUBMODULE_COMMIT=$(git rev-parse HEAD:$module)
            echo "Commit SHA: $SUBMODULE_COMMIT"

            # Get remote url from .gitmodules
            URL=$(git config -f .gitmodules --get submodule.$module.url)
            echo "Cloning $URL"
            git clone --no-checkout "$URL" tmp-submodule
            cd tmp-submodule
            git checkout $SUBMODULE_COMMIT

            COMMIT_MSG=$(git log -1 --pretty=%B)
            echo "Submodule commit message: $COMMIT_MSG"

            if [[ "$COMMIT_MSG" =~ Release:[[:space:]]*v?([0-9a-zA-Z._-]+) ]]; then
              FOUND_VERSION="${BASH_REMATCH[1]}"
              echo "Extracted version: $FOUND_VERSION"
              cd ..
              rm -rf tmp-submodule
              break
            fi

            cd ..
            rm -rf tmp-submodule
          done

          echo "version=$FOUND_VERSION" >> $GITHUB_OUTPUT
  validate:
    runs-on: ubuntu-latest
    needs: [extract_main_version, extract_submodule_version]
    steps:
      - name: ✅ Validate main and submodule versions
        run: |
          MAIN_VERSION="${{ needs.extract_main_version.outputs.version }}"
          SUB_VERSION="${{ needs.extract_submodule_version.outputs.version }}"

          if [ -z "$MAIN_VERSION" ] || [ -z "$SUB_VERSION" ]; then
            echo "❌ Missing version. Exiting."
            exit 1
          fi

          if [ "$MAIN_VERSION" != "$SUB_VERSION" ]; then
            echo "❌ Version mismatch: $MAIN_VERSION != $SUB_VERSION"
            exit 1
          fi

          echo "✅ Versions matched: $MAIN_VERSION"

  build:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: 📦 Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: 🛠 Build submodules
        run: |
          for module in $(git config --file .gitmodules --get-regexp path | awk '{ print $2 }'); do
            echo "Building $module..."
            pushd $module > /dev/null
            chmod +x ./build-and-install.sh
            ./build-and-install.sh
            popd > /dev/null
