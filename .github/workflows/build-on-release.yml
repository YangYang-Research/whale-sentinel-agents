name: Build on Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout repo with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      ##############################
      # 1. Extract version from main commit
      ##############################
      - name: üè∑ Extract version from main commit message
        id: extract_main_version
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          VERSION=$(echo "$COMMIT_MSG" | grep -oP 'Release:\s*\K[^\s]+' || true)
          echo "Main commit message: $COMMIT_MSG"
          echo "Extracted version: $VERSION"
          echo "main_version=$VERSION" >> $GITHUB_OUTPUT

      ##############################
      # 2. Extract version from submodule commits
      ##############################
      - name: üè∑ Extract version from submodule commits
        id: extract_submodule_version
        run: |
          FOUND_VERSION=""
          for module in $(git config --file .gitmodules --get-regexp path | awk '{ print $2 }'); do
            echo "Checking $module..."
            pushd $module > /dev/null
            COMMIT_MSG=$(git log -1 --pretty=%B)
            echo "Submodule $module last commit: $COMMIT_MSG"
            VERSION=$(echo "$COMMIT_MSG" | grep -oP 'Release:\s*\K[^\s]+' || true)
            if [ -n "$VERSION" ]; then
              FOUND_VERSION=$VERSION
              echo "‚úÖ Found Release version $VERSION in $module"
              break
            fi
            popd > /dev/null
          done
          echo "submodule_version=$FOUND_VERSION" >> $GITHUB_OUTPUT

      ##############################
      # 3. Check if both main and submodule versions exist
      ##############################
      - name: ‚úÖ Validate version from both sources
        id: validate_versions
        run: |
          MAIN_VERSION="${{ steps.extract_main_version.outputs.main_version }}"
          SUB_VERSION="${{ steps.extract_submodule_version.outputs.submodule_version }}"

          echo "Main version: $MAIN_VERSION"
          echo "Submodule version: $SUB_VERSION"

          if [ -z "$MAIN_VERSION" ] || [ -z "$SUB_VERSION" ]; then
            echo "‚ùå One of the versions is missing. Skipping build."
            exit 1
          fi

          if [ "$MAIN_VERSION" != "$SUB_VERSION" ]; then
            echo "‚ùå Main and Submodule versions do not match."
            exit 1
          fi

          echo "‚úÖ Version is valid: $MAIN_VERSION"

      ##############################
      # 4. Build all submodules
      ##############################
      - name: üõ† Build submodules
        run: |
          for module in $(git config --file .gitmodules --get-regexp path | awk '{ print $2 }'); do
            echo "Building $module..."
            pushd $module > /dev/null
            chmod +x ./build-and-install.sh
            ./build-and-install.sh
            popd > /dev/null
          done

      ##############################
      # 5. Collect /dist into versioned artifact folders
      ##############################
      - name: üìÅ Collect versioned artifacts
        run: |
          VERSION="${{ steps.extract_main_version.outputs.main_version }}"
          mkdir -p artifacts
          for module in $(git config --file .gitmodules --get-regexp path | awk '{ print $2 }'); do
            DIST_PATH="$module/dist"
            DEST="artifacts/${module}-${VERSION}"
            if [ -d "$DIST_PATH" ]; then
              mkdir -p "$DEST"
              cp -r $DIST_PATH/* "$DEST/"
              echo "‚úÖ Copied from $DIST_PATH to $DEST"
            else
              echo "‚ö†Ô∏è No dist/ found in $module"
            fi
          done

      ##############################
      # 6. Upload artifacts
      ##############################
      - name: ‚¨ÜÔ∏è Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ steps.extract_main_version.outputs.main_version }}
          path: artifacts